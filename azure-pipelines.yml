# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: "Linux_x64"
  pool:
    vmImage: 'ubuntu-16.04'

  steps:
    - task: DotNetCoreCLI@2
      displayName: "unit tests"
      inputs:
        command: test
        projects: '**/*Test/*.csproj'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: './taa/taa.csproj'
        arguments: '-c Release -r linux-x64 --self-contained true --output $(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Linux'
        publishLocation: 'Container'
        TargetPath: "./taa/taa.csproj"
- job: "Windows_x64"
  pool:
    vmImage: "windows-2019"

  steps:
    - task: DotNetCoreCLI@2
      displayName: "unit tests"
      inputs:
        command: test
        projects: '**/*Test/*.csproj'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: './taa/taa.csproj'
        arguments: '-c Release -r win-x64 --self-contained true --output $(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Windows'
        publishLocation: 'Container'
        TargetPath: "./taa/taa.csproj"

- job: "Release"
  dependsOn:
    - Windows_x64
    - Linux_x64
  
  steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        itemPattern: '**'
        downloadType: 'specific'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - script: ls $(Build.ArtifactStagingDirectory)

    
  